package cn.goodman.pattern.strategy;

/**
 * Created by Shaun on 2017/2/7.
 * 定义一个策略接口
 * 包含一个攻击方法
 */
public interface IStrategy {
    public void attack();
}

/**
 * 简单工厂模式：
 简单工厂模式，首先要有个工厂类，还要有个产品类。通过工厂类的静态接口获得用户需要的产品对象，也就是通过工厂来生产产品，
 这些对象的类都继承于相同的基类，拥有相同的方法，这样的封装可以实现让不同的变化通过统一的方式来调用，这也是多态的效果。
 对于要生成什么样的对象，这个判断是放在工厂类里面的，用户需要传给工厂类相应的参数，工厂类来做判断返回对应的产品类对象，
 用户再使用这个产品类对象做相应的操作。对于工厂模式，我觉得用户是希望得到产品类对象的并且希望自己操作，
 而且每个产品类不一定具有相同的方法，但他们都具有相似的属性。所以，工厂模式侧重于生产产品对象。

 策略模式：
 策略模式和简单工厂模式有很多相似的地方，他是针对不同的算法对其进行封装，更强调的是对一种方法的封装。
 策略模式里面没有产生策略对象的方法，他是要接收每个策略或者算法对象的，产生算法对象的任务是交给客户端来完成，
 在客户端里面，用户需要根据具体情况生成对应的算法对象。Context类是就是对一种算法的引用，Context类接收算法对象，
 并提供给用户返回算法结果的方法，算法的实际调用也是在这个方法中进行的。所以，策略模式更加强调的是对方法的封装。

 作者：呼呼
 链接：https://www.zhihu.com/question/22504014/answer/141546797
 来源：知乎
 著作权归作者所有，转载请联系作者获得授权。
 */